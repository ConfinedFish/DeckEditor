package cards.type;

import java.util.ArrayList;
import java.util.Arrays;

public enum SubType{
	Advisor,
	Aetherborn,
	Ajani,
	Alara,
	Ally,
	Aminatou,
	And,
	Angel,
	Angrath,
	Anteater,
	Antelope,
	Ape,
	Arcane,
	Archer,
	Archon,
	Arkhos,
	Arlinn,
	Artificer,
	Ashiok,
	Assassin,
	Assembly,
	Assemblyworker,
	Atog,
	Aura,
	Aurochs,
	Autobot,
	Avatar,
	Azgol,
	Azra,
	Baddest,
	Badger,
	Barbarian,
	Basilisk,
	Bat,
	Bear,
	Beast,
	Beaver,
	Beeble,
	Belenon,
	Berserker,
	Biggest,
	Bird,
	Blinkmoth,
	Boar,
	Bolas,
	Brainiac,
	Bringer,
	Brushwagg,
	Bureaucrat,
	Camarid,
	Camel,
	Caribou,
	Carrier,
	Cartouche,
	Cat,
	Centaur,
	Cephalid,
	Chandra,
	Chicken,
	Child,
	Chimera,
	Citizen,
	Clamfolk,
	Cleric,
	Clue,
	Cockatrice,
	Conspiracy,
	Construct,
	Contraption,
	Cow,
	Coward,
	Crab,
	Crocodile,
	Curse,
	Cyborg,
	Cyclops,
	Dack,
	Daretti,
	Dauthi,
	Deer,
	Demon,
	Desert,
	Deserter,
	Designer,
	Devil,
	Dinosaur,
	Djinn,
	Dominaria,
	Domri,
	Donkey,
	Dovin,
	Dragon,
	Drake,
	Dreadnought,
	Drone,
	Druid,
	Dryad,
	Dungeon,
	Dwarf,
	Eaturecray,
	Efreet,
	Egg,
	Elder,
	Eldrazi,
	Elemental,
	Elephant,
	Elf,
	Elk,
	Elspeth,
	Elves,
	Equilor,
	Equipment,
	Ergamon,
	Estrid,
	Etiquette,
	Ever,
	Eye,
	Fabacin,
	Faerie,
	Ferret,
	Fish,
	Flagbearer,
	Forest,
	Fortification,
	Fox,
	Freyalise,
	Frog,
	Fungus,
	Gamer,
	Gargoyle,
	Garruk,
	Gate,
	Germ,
	Giant,
	Gideon,
	Gnome,
	Goat,
	Goblin,
	God,
	Golem,
	Gorgon,
	Graveborn,
	Gremlin,
	Griffin,
	Gus,
	Hag,
	Harpy,
	Hatificer,
	Head,
	Hellion,
	Hero,
	Hippo,
	Hippogriff,
	Homarid,
	Homunculus,
	Hormarid,
	Horror,
	Horse,
	Host,
	Hound,
	Huatli,
	Human,
	Hydra,
	Hyena,
	Igpay,
	Illusion,
	Imp,
	Incarnation,
	Innistrad,
	Insect,
	Iquatana,
	Ir,
	Island,
	Jace,
	Jackal,
	Jaya,
	Jellyfish,
	Juggernaut,
	Kaldheim,
	Kamigawa,
	Kangaroo,
	Karn,
	Karsus,
	Kavu,
	Kaya,
	Kephalai,
	Killbot,
	Kinshala,
	Kiora,
	Kirin,
	Kithkin,
	Knight,
	Kobold,
	Kolbahan,
	Kor,
	Koth,
	Kraken,
	Kyneth,
	Lady,
	Lair,
	Lamia,
	Lammasu,
	Leech,
	Legend,
	Leviathan,
	Lhurgoyf,
	Licid,
	Liliana,
	Lizard,
	Lobster,
	Locus,
	Lorwyn,
	Luvion,
	Manticore,
	Master,
	Masticore,
	Meditation,
	Mercadia,
	Mercenary,
	Merfolk,
	Metathran,
	Mime,
	Mine,
	Minion,
	Minotaur,
	Mirrodin,
	Moag,
	Mole,
	Monger,
	Mongoose,
	Mongseng,
	Monk,
	Monkey,
	Moonfolk,
	Mountain,
	Mummy,
	Muraganda,
	Mutant,
	Myr,
	Mystic,
	Naga,
	Nahiri,
	Narset,
	Nastiest,
	Nautilus,
	Nephilim,
	New,
	Nightmare,
	Nightstalker,
	Ninja,
	Nissa,
	Nixilis,
	Noggle,
	Nomad,
	Nymph,
	Octopus,
	Of,
	Ogre,
	Ongoing,
	Ooze,
	Or,
	Orb,
	Orc,
	Orgg,
	Ouphe,
	Ox,
	Oyster,
	Pangolin,
	Paratrooper,
	Pegasus,
	Penguin,
	Pentavite,
	Pest,
	Phelddagrif,
	Phenomenon,
	Phoenix,
	Phyrexia,
	Pilot,
	Pincher,
	Pirate,
	Plains,
	Plane,
	Plant,
	Power,
	Powerplant,
	Praetor,
	Prism,
	Processor,
	Proper,
	Pyrulea,
	Rabbit,
	Rabiah,
	Raccoon,
	Ral,
	Rat,
	Rath,
	Ravnica,
	Realm,
	Rebel,
	Reflection,
	Regatha,
	Reveler,
	Rhino,
	Rigger,
	Rogue,
	Rowan,
	Rukh,
	S,
	Sable,
	Saga,
	Saheeli,
	Salamander,
	Samurai,
	Samut,
	Sand,
	Saproling,
	Sarkhan,
	Satyr,
	Scarecrow,
	Scariest,
	Scheme,
	Scientist,
	Scion,
	Scorpion,
	Scout,
	See,
	Segovia,
	Serf,
	Serpent,
	Serra,
	Servo,
	Shade,
	Shadowmoor,
	Shaman,
	Shandalar,
	Shapeshifter,
	Sheep,
	Ship,
	Shrine,
	Siren,
	Skeleton,
	Slith,
	Sliver,
	Slug,
	Snake,
	Soldier,
	Soltari,
	Sorin,
	Spawn,
	Specter,
	Spellshaper,
	Sphinx,
	Spider,
	Spike,
	Spirit,
	Splinter,
	Sponge,
	Spy,
	Squid,
	Squirrel,
	Starfish,
	Surrakar,
	Survivor,
	Swamp,
	Tamiyo,
	Teferi,
	Tetravite,
	Tezzeret,
	Thalakos,
	The,
	Thopter,
	Thrull,
	Tibalt,
	Tower,
	Townsfolk,
	Trap,
	Treasure,
	Treefolk,
	Tribal,
	Trilobite,
	Triskelavite,
	Troll,
	Turtle,
	U2019s,
	Ugin,
	Ulgrotha,
	Unicorn,
	Urza,
	Urzas,
	Valla,
	Vampire,
	Vampyre,
	Vanguard,
	Vedalken,
	Vehicle,
	Venser,
	Viashino,
	Villain,
	Vivien,
	Volver,
	Vraska,
	Vryn,
	Waiter,
	Wall,
	Warrior,
	Wasp,
	Weird,
	Werewolf,
	Whale,
	Wildfire,
	Will,
	Windgrace,
	Wizard,
	Wolf,
	Wolverine,
	Wombat,
	Worker,
	Worm,
	Wraith,
	Wrestler,
	Wurm,
	Xenagos,
	Xerex,
	Yanggu,
	Yanling,
	Yeti,
	Zendikar,
	Zombie,
	Zubera;
	public static final ArrayList<String> errorSubTypes = new ArrayList<>();
	
	public static ArrayList<SubType> parseString(String string){
		ArrayList<String> stringArrayList = new ArrayList<>(Arrays.asList(string.trim().split("\\W+")));
		ArrayList<SubType> subTypes = new ArrayList<>();
		for (String strings : stringArrayList){
			if (strings != null && strings.length() > 0)
				try{
					subTypes.add(valueOf(strings));
				} catch (Exception e){
					if (!errorSubTypes.contains(strings))
						errorSubTypes.add(strings);
				}
		}
		return subTypes;
	}
	
}
